require("resty.core")

local block = ""

-- skip favicon
if ngx.var.uri == "/favicon.ico" then return ngx.location.capture(ngx.var.uri) end
ngx.log(ngx.INFO, block, "################################################################################")

-- import requirements
local cjson = require("cjson")
local https = require("ssl.https")
local url = require("socket.url")
local ltn12 = require("ltn12")
local resty_session = require("resty.session")
local session = resty_session.start()

-- TODO: make this an oauth lib
local oauth = {
    _VERSION = "0.1"
    authorize_base_url = "https://github.com/login/oauth/authorize",
    access_token_url = "https://github.com/login/oauth/access_token",
    user_orgs_url = "https://api.github.com/user/orgs",
    user_url = "https://api.github.com/user",
    app_id = ngx.var.oauth_id,
    app_secret = ngx.var.oauth_secret,
    orgs_whitelist = ngx.var.oauth_orgs_whitelist,
    scope = ngx.var.oauth_scope,
    auth_page = ngx.var.oauth_auth_page
}

if oauth.auth_page then
    local use_oauth = ngx.var.cookie_OAuthAuthType or nil
    if (not use_oauth) then
        local f = io.open(oauth.auth_page, "r")
        ngx.header.content_type = "text/html"
        ngx.say(f:read("*all"))
        f:close()
        return ngx.exit(ngx.HTTP_OK)
    end

    if (use_oauth ~= "github") then
        ngx.status = ngx.HTTP_UNAUTHORIZED
        return ngx.exit(ngx.HTTP_OK)
    end
end

oauth.authorize_url = oauth.authorize_base_url.."?client_id="..oauth.app_id.."&scope="..oauth.scope

function oauth.request(url_string, method)
    local result_table = {}

    local url_table = {
      url = url.build(url.parse(url_string, {port = 443})),
      method = method,
      sink = ltn12.sink.table(result_table),
      headers = {
        ["accept"] = "application/json"
      }
    }

    local body, code, headers, status_line = https.request(url_table)

    local json_body = ""
    for i, value in ipairs(result_table) do json_body = json_body .. value end

    ngx.log(ngx.INFO, block, "body::", json_body)

    return {body=cjson.decode(json_body), status=code, headers=headers}
end

function oauth.get(url_string)
    return oauth.request(url_string, "GET")
end

function oauth.get_access_token(code)

    local params = {
        access_token_url=oauth.access_token_url,
        client_id=oauth.app_id,
        client_secret=oauth.app_secret,
        code=code,
        redirect_uri=oauth.redirect_uri,
    }

    local url_string = oauth.access_token_url.."?"..ngx.encode_args(params)

    return oauth.get(url_string)
end

function oauth.get_user_info(access_token)
    local params = {access_token=access_token}
    local url_string = oauth.user_url.."?"..ngx.encode_args(params)
    local response = oauth.get(url_string)
    local body = response.body
    if body.error then
        return {status=401, message=body.error}
    end
    return {status=200, body={access_token=access_token, login=body.login, email=body.email}}
end

function oauth.verify_user(access_token)
    local params = {access_token=access_token}
    local url_string = oauth.user_orgs_url.."?"..ngx.encode_args(params)
    local response = oauth.get(url_string)
    local body = response.body
    oauth.orgs_whitelist = cjson.decode(oauth.orgs_whitelist)

    if body.error then
        return {status=401, message=body.error}
    end

    for i, org in ipairs(body) do
        ngx.log(ngx.INFO, block, "testing: ", org.login)

        if oauth.orgs_whitelist[org.login] then
            ngx.log(ngx.INFO, block, org.login, " is in orgs_whitelist")
            return {status=200, body={access_token=access_token, org=org, access_level=9001}}
        end
    end

    return {status=403, message='not authorized for any orgs'}
end

--- end oauth lib


local args = ngx.req.get_uri_args()


local function unauthorized(status, message, login, token, return_json)
    -- Expire their stored token
    session.data.redirect_args = nil
    session.data.redirect_uri = nil
    session:save()

    ngx.log(ngx.ERR, "Unauthorized access: user=",login, " token=", token)
    ngx.status = ngx.HTTP_UNAUTHORIZED
    if return_json then
        ngx.header.content_type = "application/json"
        ngx.say('{"status": '..status..', "user:", "'..login..'", "message": "'..message..'"}')
    else
        ngx.header.content_type = "text/html"
        ngx.say('<html><body><h1>', message, '</h1></body></html>')
    end
end

-- extract previous token from cookie if it is there
local access_token = session.data.access_token or nil
local authorized = session.data.authorized or nil

if access_token == "" then access_token = nil end

if authorized and authorized == "false" then
    unauthorized(session.data.unauth_status, session.data.unauth_message, session.data.login, access_token, true)
    return ngx.exit(ngx.HTTP_OK)
end

if access_token and authorized ~= access_token.."true" then authorized = nil end

-- We have nothing, do it all
if not access_token then
    block = "[A]"
    ngx.log(ngx.INFO, block, 'authorized=', authorized)
    ngx.log(ngx.INFO, block, 'access_token=', access_token)

    -- first lets check for a code where we retrieve
    -- credentials from the api
    if not access_token or args.code then
        if args.code then
            response = oauth.get_access_token(args.code)

            -- kill all invalid responses immediately
            if response.status ~= 200 or response.body.error then
                ngx.status = response.status
                ngx.header.content_type = "application/json"
                response.body.auth_wall = "something went wrong with the OAuth process"
                ngx.say(cjson.encode(response.body))
                ngx.exit(ngx.HTTP_OK)
            end

            -- decode the token
            access_token = response.body.access_token
        end

        -- both the cookie and proxy_pass token retrieval failed
        if not access_token then
            local redirect_uri = session.data.redirect_uri or ngx.var.uri
            local redirect_args = session.data.redirect_args or ngx.var.args
            if not redirect_uri then
                redirect_uri = "/"
            elseif string.match(redirect_uri, "/_callback") then
                redirect_uri = "/"
                redirect_args = nil
            end
            ngx.log(ngx.INFO, block, "no access_token, redirect_uri=", redirect_uri, " redirect_args=", redirect_args)

            session.data.redirect_uri = redirect_uri
            session.data.redirect_args = redirect_args
            if redirect_uri or redirect_args then
                session:save()
            end
            return ngx.redirect(oauth.authorize_url)
        end
    end
end


-- Not authorized with current access_token
if not authorized or authorized ~= access_token.."true" then
    block = "[B]"
    ngx.log(ngx.INFO, block, 'authorized=', authorized)
    ngx.log(ngx.INFO, block, 'access_token=', access_token)
    -- Check is we have capability to get user login
    local user_info = oauth.get_user_info(access_token)
    if user_info.status ~= 200 then
        session.data.login = "unknown"
        session.data.email = "unknown"
    else
        session.data.login = user_info.body.login
        session.data.email = user_info.body.email
    end

    -- ensure we have a user with the proper access app-level
    local verify_user_response = oauth.verify_user(access_token)
    if verify_user_response.status ~= 200 then
        -- delete their bad token
        session.data.authorized = "false"
        session.data.unauth_status = verify_user_response.status
        if verify_user_response.status == 403 then
            session.data.unauth_message = verify_user_response.message
        else
            session.data.unauth_message = "Error accessing oauth.api for credentials"
        end
    else
        -- Ensure we have the minimum for access_level to this resource
        if verify_user_response.body.access_level < 255 then
            session.data.authorized = "false"
            session.data.unauth_status = 403
            session.data.unauth_message = '"USER_ID '..access_token..' has no access to this resource"'
        else
            -- Store the access_token within a cookie
            session.data.authorized = access_token .. "true"
        end
    end
    session.data.access_token = access_token
    session:save()
end

-- Support redirection back to your request if necessary
local redirect_uri = session.data.redirect_uri or nil
local redirect_args = session.data.redirect_args or nil

if redirect_uri then
    if string.match(redirect_uri, "/_callback") then
        redirect_uri = "/"
        redirect_args = nil
    elseif redirect_args then
        redirect_uri = redirect_uri.."?"..redirect_args
    end
    ngx.log(ngx.INFO, block, "Redirecting to ", redirect_uri)
    session.data.redirect_args = nil
    session.data.redirect_uri = nil
    session:save()
    return ngx.redirect(redirect_uri)
end
ngx.var.auth_user = session.data.login or "unknown"
ngx.var.auth_email = session.data.email or "unknown"
ngx.log(ngx.INFO, block, "--------------------------------------------------------------------------------")
